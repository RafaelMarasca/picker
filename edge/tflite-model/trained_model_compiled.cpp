/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 29.05.2023 14:39:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 11024;
#else
constexpr int kTensorArenaSize = 10000;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,26,36,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 504, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*1] = { 
  /* [0][0][][] */ -77, -32, -64, 
  /* [0][1][][] */ 75, 75, -33, 
  /* [0][2][][] */ 92, 127, 58, 
  /* [1][0][][] */ 18, -6, -59, 
  /* [1][1][][] */ -76, 32, 2, 
  /* [1][2][][] */ 12, -127, -22, 
  /* [2][0][][] */ 26, -82, -124, 
  /* [2][1][][] */ 101, -127, -122, 
  /* [2][2][][] */ -116, 84, -62, 
  /* [3][0][][] */ 17, 127, -12, 
  /* [3][1][][] */ 99, 107, -32, 
  /* [3][2][][] */ 24, 85, 6, 
  /* [4][0][][] */ -21, 27, -53, 
  /* [4][1][][] */ 82, 127, -72, 
  /* [4][2][][] */ 13, -3, -94, 
  /* [5][0][][] */ 127, 50, 0, 
  /* [5][1][][] */ 14, -33, -46, 
  /* [5][2][][] */ -105, -92, 89, 
  /* [6][0][][] */ -80, -61, -119, 
  /* [6][1][][] */ -127, -57, 1, 
  /* [6][2][][] */ 94, 22, -70, 
  /* [7][0][][] */ -72, -103, -26, 
  /* [7][1][][] */ 127, 108, -96, 
  /* [7][2][][] */ -29, 82, -11, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant2_scale = { 8, { 0.0051117260009050369, 0.0020090220496058464, 0.0022932689171284437, 0.0031640906818211079, 0.0042841867543756962, 0.0032809425611048937, 0.0022206609137356281, 0.003318950766697526, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { -13375, 0, -3310, -10711, -145, 5291, -5304, 6093, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 2.0045985365868546e-05, 7.8785178629914299e-06, 8.9932118498836644e-06, 1.2408199836499989e-05, 1.6800733646959998e-05, 1.2866442375525367e-05, 8.7084745246102102e-06, 1.3015494005230721e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[8*2*2*8] = { 
  /* [0][0][][] */ -43,-25,-15,-42,74,127,32,49, 2,-17,-33,-2,93,62,-16,118, 
  /* [0][1][][] */ 42,-3,-1,-14,63,5,-8,116, -11,28,-45,19,86,111,-18,46, 
  /* [1][0][][] */ -29,-10,33,-8,6,75,-28,-127, 0,29,-14,50,-56,57,12,-126, 
  /* [1][1][][] */ -125,-2,-20,13,42,106,6,-24, -115,14,14,2,-18,117,-6,-33, 
  /* [2][0][][] */ -71,-1,26,-47,-16,127,-23,2, 22,-2,34,-49,15,-10,-37,63, 
  /* [2][1][][] */ 71,37,6,9,62,12,34,127, 43,36,-17,33,40,86,24,110, 
  /* [3][0][][] */ -26,6,19,-30,122,43,-1,127, -28,-9,33,-40,34,126,39,29, 
  /* [3][1][][] */ -13,-13,-3,22,30,124,36,29, 57,-21,40,13,127,28,-3,127, 
  /* [4][0][][] */ 4,28,15,-2,69,64,-4,20, 32,19,-20,49,123,91,24,37, 
  /* [4][1][][] */ -57,-11,-1,-17,120,122,-12,127, -37,25,-41,-46,57,104,39,95, 
  /* [5][0][][] */ 59,-21,-59,11,-127,-93,53,85, 70,-94,110,-100,-4,-30,107,-85, 
  /* [5][1][][] */ -89,-90,-94,-59,-99,15,56,-36, 37,72,98,-13,-93,-111,-70,-83, 
  /* [6][0][][] */ 35,3,15,4,-37,10,40,-66, 11,-48,21,51,-100,-53,43,-127, 
  /* [6][1][][] */ 12,16,7,17,-7,-11,-45,-42, -1,44,44,-1,-86,-19,-50,-114, 
  /* [7][0][][] */ 8,30,-34,19,119,63,-7,127, -17,-21,18,-45,54,47,3,16, 
  /* [7][1][][] */ -6,-9,-26,-27,-42,101,10,2, 58,30,16,35,115,33,-38,126, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 8,2,2,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.0078688822686672211, 0.0076708253473043442, 0.0078153926879167557, 0.0076297959312796593, 0.007212124764919281, 0.0025297703687101603, 0.0058572874404489994, 0.0078685563057661057, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[8] = { -3770, 3482, -4505, -4331, -2489, -2205, 249, -10034, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 4.0527844248572364e-05, 3.9507773180957884e-05, 4.025235102744773e-05, 3.9296453905990347e-05, 3.7145284295547754e-05, 1.3029314686718863e-05, 3.016733899130486e-05, 4.0526167140342295e-05, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[3*504] = { 
  20, -28, 24, 38, 26, 2, -1, 21, 22, -13, 23, 29, 14, 10, 4, 17, 18, -60, 29, 22, 13, 5, 3, 23, 17, -56, 38, 3, 2, 12, -4, 13, 18, -54, 27, 6, -12, 10, -3, 7, 14, -67, 20, 12, -9, -6, -8, 20, 22, -44, 22, 34, 10, 5, -1, 22, 21, -5, 22, 14, 17, -8, 1, 17, 4, 8, 18, 5, 13, 8, 2, 3, -16, -30, -2, -21, -24, -4, -11, 11, -51, -58, -12, -62, -67, -5, -6, -31, -64, -79, -40, -79, -76, 8, 6, -45, -74, -82, -42, -55, -85, -5, -3, -23, -66, -78, -49, -78, -70, 6, 2, -32, -66, -76, -57, -79, -60, -3, 4, -31, -40, -79, -44, -46, -56, 6, -5, -13, 36, -44, 37, 41, 11, -2, -7, 34, 8, -8, 19, 8, 15, -8, 0, 11, -40, -11, -31, -29, -28, -6, -11, -24, -63, -14, -52, -77, -66, 0, -1, -42, -64, -30, -57, -69, -65, 10, 15, -49, -65, -56, -83, -68, -65, 4, 24, -68, -72, -74, -101, -74, -69, 6, 19, -59, -82, -29, -88, -81, -67, -2, 11, -53, -66, -40, -55, -80, -67, 11, 10, -18, -24, -42, -11, -31, -30, -5, -6, 5, 2, -28, 11, 7, -1, 2, 11, 6, -11, 23, 0, -18, 13, -5, 5, -6, -71, -51, -21, -74, -54, 8, -5, -33, -60, -32, -59, -57, -65, -1, 3, -47, -54, -61, -53, -63, -73, 0, 2, -55, -65, -71, -68, -73, -88, 5, 5, -52, -74, -109, -52, -79, -95, 7, 7, -52, -49, -65, -26, -63, -69, 4, 2, -31, -26, -61, -33, -32, -21, -3, -6, -5, 4, -16, 22, -1, 8, -5, 4, 5, 62, 7, 65, 67, 52, 6, -6, 29, -59, 8, -39, -56, -31, -8, 8, -51, -74, -25, -65, -83, -38, 5, 5, -50, -76, -57, -57, -59, -42, 1, 7, -41, -80, -36, -74, -84, -84, 3, 4, -62, -73, -21, -75, -100, -62, -8, 3, -57, -59, -25, -52, -55, -25, -3, 0, -20, 4, -2, -9, 9, 27, -6, -6, 12, 11, 7, 14, 9, 14, -2, 0, 1, 52, 12, 45, 43, 7, 3, -15, 25, 51, 20, 37, 30, 17, 2, -8, 15, 8, 29, 19, -3, 22, 8, 7, 3, 8, 1, -10, 7, 6, -2, 13, -3, 23, 31, 13, 30, 15, 2, -4, 3, 26, 23, 8, 13, 18, 5, 14, 8, 33, 12, 14, 16, 17, 2, 11, 12, 37, -12, 29, 26, 5, 2, -11, 15, 8, -1, 10, 3, 4, 6, -7, 6, 56, 10, -5, 103, 5, 7, -4, 90, 50, 22, -4, 111, 10, 6, 0, 62, 43, 34, -2, 13, 4, -1, 0, -27, 35, 27, -10, -44, 1, -3, -12, -21, 54, -10, -12, 6, 10, 5, 6, 47, 40, 6, -8, 10, 3, -2, -8, -2, 45, 7, 3, -13, 6, 8, 3, -34, 35, 29, 3, 47, 19, -7, 5, 26, 8, 0, -8, 16, 2, 3, -6, -1, 
  6, 2, 16, 2, 10, -1, -1, 3, 7, -32, 3, 5, 13, 4, -5, 2, -8, -46, -11, -1, -6, 4, -2, -1, -17, 41, -53, -13, -5, -7, -3, -4, -3, 19, -31, -5, 11, 5, -7, 3, -11, 30, -19, 2, 3, 6, -9, 10, 4, 2, -12, 5, 3, -3, -10, 4, -1, -2, 3, 0, 10, -7, -5, 3, 3, 8, 1, -1, 3, -2, 2, -1, 11, -9, 32, 16, 11, -8, -6, 28, -23, -9, -5, -19, -30, -1, 6, -4, -4, 26, -19, 0, 1, 2, 8, -4, -1, 42, -14, -4, 32, 0, 12, -22, -13, 59, -68, -15, 45, -7, 7, -18, -30, 79, -44, -28, 37, 5, 1, -35, -33, 66, -19, -23, 36, -9, 7, -15, -15, 3, 7, -15, 9, 2, -9, 21, 8, 25, 10, -5, 5, -7, -7, 2, 5, -6, 38, 23, -3, 3, 2, 32, 10, -19, -12, 10, -9, -1, 8, 11, -3, 61, -13, 1, -4, -10, 31, -4, 12, 43, -4, 8, 27, -12, 24, -10, 13, 45, -14, -3, 19, 1, 2, -28, -5, 81, -25, -10, 24, -7, -10, -36, -4, 80, -14, -20, 10, -4, -8, -42, -10, 20, -12, -29, 4, -6, -9, -13, 3, 34, 10, 7, -2, -3, 6, -1, -3, -13, 29, -12, -14, -7, 7, 3, 1, 8, -7, 8, -12, -5, 23, 14, 6, 61, -4, 22, -6, -3, 38, 10, 19, 103, 5, 18, -7, 5, 22, -4, 12, 65, 20, 1, -21, 7, 9, -8, -8, 127, 9, 4, -53, 7, 5, -23, 0, 62, 23, -11, -38, 4, -6, -39, -4, 36, 24, -2, -12, -9, -3, -11, 7, 26, 14, 2, 8, 5, -3, 0, -4, -21, 29, -17, 26, 1, -3, 13, -4, -26, -5, -15, -7, -8, 5, -10, -16, 23, -15, -5, -24, -4, 17, -9, -4, 30, 1, -5, -37, -8, 20, -2, -10, 30, 13, 5, -69, 2, 14, -15, -13, 13, 19, -17, -75, 4, 1, -34, -22, 1, 11, -17, -60, 6, 0, -22, -23, -26, 25, -17, -32, -5, -6, 13, 5, -1, 10, 1, 8, 0, 6, -8, 9, -14, 36, 14, -1, -7, -5, 15, 15, 3, 12, 12, 3, -1, -5, 11, 13, -12, 28, 14, 9, 8, 10, 22, 2, -2, 18, 22, 1, -2, 11, 6, 5, -16, 8, -3, 4, -5, 14, -5, 14, -13, -2, 11, 6, -2, 6, 11, 16, -31, 16, 5, -3, -2, -10, 18, 0, -17, 26, 0, 2, -8, -7, -3, 7, -7, 1, -8, 1, 4, -5, 5, 7, 1, 0, 11, 5, 3, -16, 16, 11, -11, -5, -39, 1, 1, -3, 29, 11, 4, -2, 13, -1, 2, 5, 36, 14, 2, -1, 52, 6, -1, -7, 35, 8, 1, 12, 10, -3, -4, -5, 40, 4, -3, 6, 17, 0, 2, -2, 43, 4, 0, 8, -32, 5, -3, -6, 35, 3, -10, -9, -65, 7, -10, 0, -20, 1, -5, 3, 7, 3, 4, -6, -2, 
  -23, 7, -20, -25, -16, 2, -1, -13, -13, 21, -21, -25, -22, -10, -2, -15, -19, 91, 3, -7, 8, -7, -6, -16, -1, -22, 22, 17, 16, -3, 5, -2, -9, 0, 32, -1, -3, -3, 3, -7, -6, -11, 11, -10, -9, -10, 7, -13, -25, -1, -4, -19, -21, -7, 16, -21, -18, 14, -18, -28, -21, 4, 5, -12, -3, 4, -11, -10, -7, 4, -2, 0, -10, 27, -26, -13, 16, -1, -4, -36, 56, 56, 17, 49, 75, -3, -1, 35, 39, 8, 42, 44, 47, -6, -4, 22, 38, -18, 38, 30, 21, 6, -5, 37, 48, -47, 75, 55, 15, 9, -20, 46, 39, -62, 64, 64, 11, 2, 0, 61, 37, -39, 38, 53, -4, 6, -3, 16, -15, 4, -27, -17, -14, 9, 3, -41, -9, -2, -3, -10, -8, 4, -4, -6, 7, 17, -32, -5, 22, 1, 12, -12, 46, 29, 26, 41, 42, 2, -20, 24, 38, -53, 40, 44, 27, 5, -36, 23, 44, -32, 40, 43, 29, 2, -30, 34, 37, -50, 44, 48, 25, -2, -31, 47, 46, -57, 49, 49, 19, 2, -8, 56, 40, -69, 31, 47, 19, -7, 6, 58, 17, 2, 22, 50, 14, 1, 13, 8, -9, -6, -14, -12, -12, -2, -5, -11, 7, 1, -27, 16, 5, 4, -11, -6, 41, 13, 11, 35, 37, -3, -29, 24, 34, -46, 25, 36, 31, -4, -57, 18, 31, -80, 15, 34, 47, 5, -38, 25, 35, -49, 25, 48, 54, -7, -20, 39, 60, -86, 29, 57, 70, 7, -9, 55, 48, -35, 17, 58, 78, -6, -6, 52, 17, 5, -11, 27, 33, -1, 1, 6, -12, -18, -16, -19, -7, 0, 0, -13, -26, 13, -46, -28, -47, -6, 1, -47, 21, 14, 17, 45, 17, 6, -6, 39, 47, 6, 40, 57, 56, 2, -20, 38, 50, 24, 28, 28, 52, -1, -29, 26, 53, 0, 5, 43, 86, -8, -19, 30, 58, -14, 15, 47, 98, 1, -9, 49, 46, 3, 21, 43, 66, 1, 5, 35, 12, 33, -19, 1, 17, -5, 14, -15, -11, -3, -16, -8, -10, 7, -1, -16, -37, 8, -45, -27, -28, -8, 6, -33, -33, 2, -26, -36, -14, -8, -4, -28, -26, -3, -25, -22, -23, -5, -4, -24, -4, 3, -3, -12, -17, -1, -18, -18, -8, 3, -4, -4, -21, 6, -7, -1, -9, 1, 10, -12, -21, -2, 2, -20, -33, 18, -37, -30, -15, 7, 4, -36, -38, 40, -30, -27, -21, -6, 9, -17, -10, -5, -16, -16, -9, 6, 3, -8, -38, -4, 3, -80, -11, -3, 2, -73, -47, 2, 5, -31, -9, -6, 3, -67, -43, -14, -5, -72, -8, 1, -7, -35, -35, -8, -3, -53, -14, 2, -6, -52, -30, 12, 0, -43, -9, -6, -5, -55, -25, 9, 2, -35, -4, 10, -3, -54, -36, 17, -8, 42, -8, -4, 8, 9, -31, 9, -4, 43, -9, 7, 0, 3, -19, 5, 3, -15, -8, 6, 5, -11, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,504 } };
const TfArray<1, float> quant6_scale = { 1, { 0.011766271665692329, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[3] = { 1459, 117, -1571, };
const TfArray<1, int> tensor_dimension7 = { 1, { 3 } };
const TfArray<1, float> quant7_scale = { 1, { 9.4156632258091122e-05, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,26,36,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0051503940485417843, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,13,18,8 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0051503940485417843, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,13,18,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0080022485926747322, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,9,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0080022485926747322, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,504 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0080022485926747322, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,3 } };
const TfArray<1, float> quant13_scale = { 1, { 0.27633565664291382, } };
const TfArray<1, int> quant13_zero = { 1, { 48 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,3 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7488, (TfLiteIntArray*)&tensor_dimension0, 936, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 7488, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7488, (TfLiteIntArray*)&tensor_dimension9, 1872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 1872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1872, (TfLiteIntArray*)&tensor_dimension11, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension13, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 15;
  for (size_t i = 0; i < 15; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
